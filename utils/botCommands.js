const { Markup } = require("telegraf");
const User = require("../models/User");
const { getChatCompletion } = require("../services/openaiService");

const MAX_FREE_MESSAGES = 3;

async function setupBot(bot) {
  bot.telegram.setMyCommands([
    { command: "buy", description: "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" },
    { command: "restart", description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫" },
    { command: "reset", description: "–ó–∞–±—ã—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É" },
    { command: "profile", description: "–ü—Ä–æ—Ñ–∏–ª—å" },
  ]);

  bot.start(async (ctx) => {
    const telegramId = ctx.from.id.toString();
    let user = await User.findOne({ telegramId });
    if (!user) await User.create({ telegramId });
    ctx.reply(
      "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Mentorio ‚Äî –±–æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —á—É–≤—Å—Ç–≤–∞—Ö, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è. –í—Å—ë –∞–Ω–æ–Ω–∏–º–Ω–æ, –±–µ—Ä–µ–∂–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ.\n\n–ü–∏—à–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Äî —è —Ä—è–¥–æ–º."
    );
  });

  bot.command("restart", (ctx) => {
    ctx.reply(
      "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü–∏—à–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Äî —è —Ä—è–¥–æ–º."
    );
  });

  bot.command("reset", (ctx) => {
    ctx.reply(
      "‚ö†Ô∏è –¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—ã—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –ø–∞–º—è—Ç—å –ú–µ–Ω—Ç–æ—Ä–∏–æ –æ–± —ç—Ç–æ–π –±–µ—Å–µ–¥–µ.",
      Markup.inlineKeyboard([
        [Markup.button.callback("üßπ –ó–∞–±—ã—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É", "confirm_reset")],
        [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_reset")],
      ])
    );
  });

  bot.command("profile", async (ctx) => {
    const telegramId = ctx.from.id.toString();
    const user = await User.findOne({ telegramId });
    const isPro = user?.isPremium;
    const remaining = Math.max(
      0,
      MAX_FREE_MESSAGES - (user?.messagesCount || 0)
    );
    const sub = isPro ? "–ü—Ä–æ" : "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è";
    const limitText = isPro
      ? "‚àû –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
      : `${remaining} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ ${MAX_FREE_MESSAGES} –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏`;

    ctx.reply(
      `üßæ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nID: ${telegramId}\n–ü–æ–¥–ø–∏—Å–∫–∞: ${sub}\n–õ–∏–º–∏—Ç—ã: ${limitText}`
    );
  });

  bot.command("buy", (ctx) => {
    ctx.reply(
      'üíñ –ü–æ–¥–ø–∏—Å–∫–∞ "–ü—Ä–æ" ‚Äî —ç—Ç–æ –±–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç –ú–µ–Ω—Ç–æ—Ä–∏–æ –∑–∞ 1000 ‚ÇΩ –≤ –º–µ—Å—è—Ü. –ù–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –∑–∞–±–æ—Ç–∞.\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:\n\nüëâ https://mentorio.pro.ru/pay'
    );
  });

  bot.action("confirm_reset", async (ctx) => {
    const telegramId = ctx.from.id.toString();
    await User.findOneAndUpdate(
      { telegramId },
      { messagesCount: 0, firstMessageAt: null }
    );
    await ctx.editMessageText("üß† –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.");
  });

  bot.action("cancel_reset", async (ctx) => {
    await ctx.editMessageText("üö´ –û—Ç–º–µ–Ω–∞. –ú—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–µ–∂–¥–µ.");
  });

  bot.on("text", async (ctx) => {
    const telegramId = ctx.from.id.toString();
    const text = ctx.message.text;

    let user = await User.findOne({ telegramId });
    if (!user) user = await User.create({ telegramId });

    if (!user.isPremium) {
      const now = new Date();

      if (!user.firstMessageAt) {
        user.firstMessageAt = now;
      } else {
        const diff = now - user.firstMessageAt;
        if (diff >= 7 * 24 * 60 * 60 * 1000) {
          user.messagesCount = 0;
          user.firstMessageAt = now;
        }
      }

      if (user.messagesCount >= MAX_FREE_MESSAGES) {
        await user.save();
        return ctx.reply(
          "üö´ –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. –û–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø: https://mentorio.pro/pay/" +
            telegramId
        );
      }
    }

    user.messagesCount++;
    await user.save();

    try {
      const reply = await getChatCompletion(text);
      ctx.reply(reply);
    } catch (err) {
      console.error("GPT error:", err);
      ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });
}

module.exports = { setupBot };
